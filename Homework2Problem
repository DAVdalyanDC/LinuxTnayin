#include <iostream>
#include <fstream>
#include <string>
#include <cstring>
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>

const std::string SERVER_HOST = "www.ysu.am";
const std::string SERVER_PORT = "443";
const std::string REQUEST = "GET / HTTP/1.1\r\nHost: " + SERVER_HOST + "\r\nConnection: close\r\n\r\n";

class Socket {
public:
    int sockfd;
    Socket() : sockfd(socket(AF_INET, SOCK_STREAM, 0)) {
        if (sockfd == -1) {
            throw std::runtime_error("Error: Could not create socket");
        }
    }
    ~Socket() {
        if (sockfd != -1) {
            close(sockfd);
        }
    }
};

int main() {
    try {
        Socket socket;

        struct addrinfo hints{}, *servinfo;
        memset(&hints, 0, sizeof(hints));
        hints.ai_family = AF_INET;
        hints.ai_socktype = SOCK_STREAM;

        if (getaddrinfo(SERVER_HOST.c_str(), SERVER_PORT.c_str(), &hints, &servinfo) != 0) {
            throw std::runtime_error("Error: Could not get address info");
        }

        auto cleanup = [&]() { freeaddrinfo(servinfo); };
        std::unique_ptr<struct addrinfo, decltype(cleanup)> auto_cleanup(servinfo, cleanup);

        if (connect(socket.sockfd, servinfo->ai_addr, servinfo->ai_addrlen) == -1) {
            throw std::runtime_error("Error: Could not connect to server");
        }

        if (send(socket.sockfd, REQUEST.c_str(), REQUEST.size(), 0) == -1) {
            throw std::runtime_error("Error: Failed to send request");
        }

        std::string response;
        char buffer[1024];
        int bytes_received;
        while ((bytes_received = recv(socket.sockfd, buffer, sizeof(buffer), 0)) > 0) {
            response.append(buffer, bytes_received);
        }

        if (bytes_received == -1) {
            throw std::runtime_error("Error: Failed to receive response");
        }

        std::cout << response << std::endl;

        std::ofstream outfile("ysu.html");
        if (!outfile) {
            throw std::runtime_error("Error: Failed to create/open file");
        }
        outfile << response;
    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
        return 1;
    }

    return 0;
}
