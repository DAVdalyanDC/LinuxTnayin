#include <iostream>
#include <vector>
#include <cstring>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <memory>

class Socket {
public:
    int sockfd;
    Socket(int domain, int type, int protocol) : sockfd(socket(domain, type, protocol)) {
        if (sockfd == -1) {
            throw std::runtime_error("Error creating socket");
        }
    }
    ~Socket() {
        if (sockfd != -1) {
            close(sockfd);
        }
    }
};

void* client_handler(void* data) {
    std::unique_ptr<int, void(*)(int*)> client_socket(static_cast<int*>(data), [](int* ptr){
        close(*ptr);
        delete ptr;
    });

    char buffer[3001];
    while (true) {
        int received = recv(*client_socket, buffer, 3000, 0);
        if (received < 0) {
            std::perror("Error receiving data from client");
            return nullptr;
        } else if (received > 0) {
            buffer[received] = '\0';
            std::cout << "Received message:\n" << buffer << "\n";
        } else {
            std::cout << "Client disconnected \n";
            break;
        }
    }
    return nullptr;
}

int main() {
    try {
        Socket server_socket(AF_INET, SOCK_STREAM, 0);

        struct sockaddr_in server_address{};
        server_address.sin_family = AF_INET;
        server_address.sin_addr.s_addr = htonl(INADDR_ANY);
        server_address.sin_port = htons(9888);

        if (bind(server_socket.sockfd, (struct sockaddr*)&server_address, sizeof(server_address)) < 0) {
            std::perror("Failed to bind socket");
            exit(errno);
        }

        if (listen(server_socket.sockfd, 1024) < 0) {
            std::perror("Failed to listen on socket");
            exit(errno);
        }

        std::cout << "Waiting for connections\n";
        std::vector<pthread_t> threads;

        while (true) {
            auto client_socket = new int; // Allocate a new client_socket for each connection
            struct sockaddr_in client_address;
            socklen_t client_addr_len = sizeof(client_address);

            *client_socket = accept(server_socket.sockfd, (struct sockaddr*)&client_address, &client_addr_len);
            if (*client_socket < 0) {
                std::perror("Failed to accept connection");
                delete client_socket; // Clean up allocated memory on error
                continue; // Skip failed connections rather than exiting
            }

            std::cout << "Client connected with address: " << inet_ntoa(client_address.sin_addr) << "\n";
            pthread_t thread;
            if (pthread_create(&thread, nullptr, client_handler, client_socket) != 0) {
                std::perror("Failed to create thread");
                delete client_socket; // Clean up allocated memory on thread creation failure
                continue; // Skip failed thread creation rather than exiting
            }
            threads.push_back(thread);
        }

        for (auto thread : threads) {
            pthread_join(thread, nullptr);
        }
    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
        return 1;
    }

    return 0;
}
